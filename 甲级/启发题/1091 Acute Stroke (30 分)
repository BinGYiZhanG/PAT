### BFS计算连通的数目

```cpp
#include <iostream>
#include <queue>
#include <cstdio>

using namespace std;

struct node{
  int x,y,z;
}Node;

bool inq[1290][130][61];
int pixel[1290][130][61]={false};
int n,m,slice,T;
int dirX[6]={0,0,0,0,1,-1};
int dirY[6]={0,0,1,-1,0,0};
int dirZ[6]={1,-1,0,0,0,0};


bool judge(int x,int y,int z){
  if(x<0||x>=n||y<0||y>=m||z<0||z>=slice)
    return false;
  if(inq[x][y][z]==true||pixel[x][y][z]==0)
    return false;
  return true;
}

int BFS(int x,int y,int z){
  queue<node> q;
  int tot=0;
  Node.x=x;
  Node.y=y;
  Node.z=z;
  q.push(Node);
  inq[x][y][z]=true;
  while(!q.empty()){
    node top=q.front();
    q.pop();
    tot++;
    int newX,newY,newZ;
    for(int i=0;i<6;i++){
      newX=top.x+dirX[i];
      newY=top.y+dirY[i];
      newZ=top.z+dirZ[i];
      if(judge(newX,newY,newZ)){
        Node.x=newX;
        Node.y=newY;
        Node.z=newZ;
        q.push(Node);
        inq[newX][newY][newZ]=true;
      }
    }
  }
  if(tot>=T)
    return tot;
  else
    return 0;
}

int main(){
  scanf("%d%d%d%d",&n,&m,&slice,&T);
  for(int z=0;z<slice;z++){
    for(int x=0;x<n;x++){
      for(int y=0;y<m;y++){
        scanf("%d",&pixel[x][y][z]);
      }
    }
  }
  int ans=0;
  for(int z=0;z<slice;z++){
    for(int x=0;x<n;x++){
      for(int y=0;y<m;y++){
        if(pixel[x][y][z]==1&&inq[x][y][z]==false){
          ans+=BFS(x,y,z);
        }
      }
    }
  }
  printf("%d",ans);
  return 0;
}

```

